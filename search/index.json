[{"content":"可以透過HttpClient這個類別，在開發程式時針對欲訪問的URI，以HTTP方式傳送Request及接收Response。\nHttpClient只需實體化一次，就可以發送多個請求，官方建議以static方式共用，不須使用using()來釋放連線。\nstatic readonly HttpClient client = new HttpClient(); static async Task Main() { try\t{ HttpResponseMessage response = await client.GetAsync(\u0026#34;http://www.contoso.com/\u0026#34;); response.EnsureSuccessStatusCode(); string responseBody = await response.Content.ReadAsStringAsync(); Console.WriteLine(responseBody); } catch(HttpRequestException e) { Console.WriteLine(\u0026#34;\\nException Caught!\u0026#34;);\tConsole.WriteLine(\u0026#34;Message :{0} \u0026#34;,e.Message); } } 不過HttpClient只會在建立連線時解析DNS專案，無法即時反應DNS的異動，可以透過PooledConnectionIdleTimeout來限制連線的存活時間，以利重新解析DNS。\n或是使用ASP.NET Core 2.1 / .NET 4.6 起推出的 HttpClientFactory，可藉由Connection Pool解決連線共用及DNS 異動的問題。\n以下參考在 ASP.NET Core 中使用 IHttpClientFactory 發出 HTTP 要求的基本使用方法\n版本：.NET Core 3.1\n在Startup.cs裡註冊服務\nIHttpClientFactory可以藉由呼叫 AddHttpClient來註冊：\npublic class Startup { public void ConfigureServices(IServiceCollection services) { services.AddHttpClient(); } } 在Class中透過相依性注入IHttpClientFactory\npublic class BasicUsageModel : PageModel { private readonly IHttpClientFactory _clientFactory; public BasicUsageModel(IHttpClientFactory clientFactory) { _clientFactory = clientFactory; }\t} 使用CreateClient方法取得HttpClient執行個體\npublic async Task OnGet() { var request = new HttpRequestMessage(HttpMethod.Get, \u0026#34;https://api.github.com/repos/dotnet/AspNetCore.Docs/branches\u0026#34;); var client = _clientFactory.CreateClient(); var response = await client.SendAsync(request); } 🎯Reference\n微軟官方文件\n在 ASP.NET Core 中使用 IHttpClientFactory 發出 HTTP 要求\n使用 HttpClientFactory 實作復原 HTTP 要求\nHttpClient，該 using 還是 static?\n在 .NET Core 與 .NET Framework 上使用 HttpClientFactory\nHttpClient 無法反應 DNS 異動的解決方式\n","date":"2022-09-18T14:40:13+08:00","permalink":"https://salanking.github.io/posts/httpclient/","title":"使用HttpClient發出HTTP請求"},{"content":"安裝Hugo 作業系統：Windows\nHugo的Git發布頁面連結，即可找到最新發布的各系統版本，下載後可按照官網的影片步驟操作。\n但是依照一般方法下載安裝後要處理的步驟比較多，推薦透過scoop來安裝步驟簡單省時間。\n步驟： 以下步驟使用PowerShell完成\n安裝Scoop\niwr -useb get.scoop.sh | iex 安裝Hugo\nscoop install hugo 或是安裝extended版本，我使用到的套版有註明：若修改 SCSS 文件會需要extended版本\nscoop install hugo-extended 用Hugo建立網站 步驟： 以下步驟使用PowerShell完成\n建立新網站\nhugo new site 自訂專案資料夾名稱 cd進入到資料夾中\ncd 自訂專案資料夾名稱 初始化Git版控，並將目前資料加入版控\ngit init git add . 使用git下載主題並將主題添加為 Submodule\ngit clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 參考畫面：\n更換或修改config 可直接用主題範例的config檔案置換掉網站根目錄下的config檔案再修改比較方便。\n或是直接修改config檔案的theme，改成自己使用的主題\nps.格式有分toml、yaml、json，可參考官網說明 toml yaml 新增一篇文章，將被建立在./content/posts/ 資料夾底下\nhugo new posts/文檔名稱.md 運行Hugo\nhugo server -D Hugo預設port為：http://localhost:1313/\n開啟頁面即可看到網站已經在本地run起來\n常用Hugo指令 建立新專案 hugo new 本地運行Hugo(會顯示草稿文件) hugo server -D 本地運行Hugo(不含草稿文件) hugo server 打包網站 hugo 🎯Reference Hugo官方文件\nHugo 貼身打造個人部落格 :: 第 12 屆 iThome 鐵人賽\n","date":"2022-08-26T01:56:24+08:00","image":"https://salanking.github.io/images/Hugo/05.jpg","permalink":"https://salanking.github.io/posts/hugo/","title":"Hugo架站"}]